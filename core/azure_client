import requests
import base64
import json
from urllib.parse import quote

class AzureDevOpsClient:
    def __init__(self, organization_url, pat_token, project_name):
        self.organization_url = organization_url.rstrip('/')
        self.pat_token = pat_token
        self.project_name = project_name
        self.api_version = "6.0"
        
        # Authentication header
        auth_string = f":{pat_token}"
        auth_bytes = auth_string.encode('ascii')
        auth_b64 = base64.b64encode(auth_bytes).decode('ascii')
        
        self.headers = {
            'Authorization': f'Basic {auth_b64}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    
    def test_connection(self):
        """Bağlantıyı test et"""
        try:
            url = f"{self.organization_url}/_apis/projects/{quote(self.project_name)}?api-version={self.api_version}"
            response = requests.get(url, headers=self.headers, timeout=10)
            return response.status_code == 200
        except Exception:
            return False
    
    def get_teams(self):
        """Proje takımlarını listele"""
        try:
            url = f"{self.organization_url}/_apis/projects/{quote(self.project_name)}/teams?api-version={self.api_version}"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return data.get('value', [])
            else:
                raise Exception(f"API Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            raise Exception(f"Takımlar alınamadı: {str(e)}")
    
    def get_team_by_name(self, team_name):
        """Takım adına göre takım bilgilerini al"""
        teams = self.get_teams()
        for team in teams:
            if team['name'].lower() == team_name.lower():
                return team
        return None
    
    def get_team_members(self, team_id):
        """Takım üyelerini listele"""
        try:
            url = f"{self.organization_url}/_apis/projects/{quote(self.project_name)}/teams/{team_id}/members?api-version={self.api_version}"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return data.get('value', [])
            else:
                raise Exception(f"API Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            raise Exception(f"Takım üyeleri alınamadı: {str(e)}")
    
    def add_user_to_team(self, team_name, user_email, role="Member"):
        """Kullanıcıyı takıma ekle"""
        try:
            # Takım bilgilerini al
            team = self.get_team_by_name(team_name)
            if not team:
                raise Exception(f"Takım bulunamadı: {team_name}")
            
            team_id = team['id']
            
            # Kullanıcı bilgilerini al
            user = self.get_user_by_email(user_email)
            if not user:
                raise Exception(f"Kullanıcı bulunamadı: {user_email}")
            
            user_id = user['id']
            
            # Takıma ekle
            url = f"{self.organization_url}/_apis/projects/{quote(self.project_name)}/teams/{team_id}/members/{user_id}?api-version={self.api_version}"
            
            response = requests.put(url, headers=self.headers, timeout=10)
            
            if response.status_code in [200, 204]:
                return True
            else:
                raise Exception(f"API Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            raise Exception(f"Kullanıcı eklenemedi: {str(e)}")
    
    def remove_user_from_team(self, team_name, user_email):
        """Kullanıcıyı takımdan çıkar"""
        try:
            # Takım bilgilerini al
            team = self.get_team_by_name(team_name)
            if not team:
                raise Exception(f"Takım bulunamadı: {team_name}")
            
            team_id = team['id']
            
            # Kullanıcı bilgilerini al
            user = self.get_user_by_email(user_email)
            if not user:
                raise Exception(f"Kullanıcı bulunamadı: {user_email}")
            
            user_id = user['id']
            
            # Takımdan çıkar
            url = f"{self.organization_url}/_apis/projects/{quote(self.project_name)}/teams/{team_id}/members/{user_id}?api-version={self.api_version}"
            
            response = requests.delete(url, headers=self.headers, timeout=10)
            
            if response.status_code in [200, 204]:
                return True
            else:
                raise Exception(f"API Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            raise Exception(f"Kullanıcı çıkarılamadı: {str(e)}")
    
    def get_user_by_email(self, email):
        """Email ile kullanıcı ara"""
        try:
            # Graph API kullanarak kullanıcı ara
            url = f"{self.organization_url}/_apis/graph/users?api-version={self.api_version}-preview.1"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                users = data.get('value', [])
                
                for user in users:
                    if user.get('mailAddress', '').lower() == email.lower():
                        return user
                
                # Bulunamadıysa identity ile ara
                return self.search_user_by_identity(email)
            else:
                raise Exception(f"API Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            raise Exception(f"Kullanıcı aranamadı: {str(e)}")
    
    def search_user_by_identity(self, email):
        """Identity API ile kullanıcı ara"""
        try:
            url = f"{self.organization_url}/_apis/identities?searchFilter=MailAddress&filterValue={quote(email)}&api-version={self.api_version}"
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                identities = data.get('value', [])
                
                if identities:
                    return identities[0]
            
            return None
            
        except Exception:
            return None